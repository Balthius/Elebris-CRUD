@page "/DerivedStat/FetchData"

@inject IStatData statData
@inject IJSRuntime js
<h3>Derived Stats</h3>

<small>Add as many derived stats as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="Derivedstat/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (DerivedStats == null)
{
    <text>Loading...</text>
}
else if (DerivedStats.Count == 0)
{
    <text>No Records Found.</text>
}
else
{

    <table class="table table-striped">
        <thead>
            <tr>
                <td>Id</td>
                <td>Name</td>
                <td>ParentStatId</td>
                <td>TargetStatId</td>
                <td>ScaleFromParent</td>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (DerivedStatModel item in DerivedStats)
            {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@ReturnStatName(@item.ParentStatId)</td>
                <td>@ReturnStatName(@item.TargetStatId)</td>
                <td>@item.ScaleFromParent</td>
                <AuthorizeView Roles="admin, superuser">
                    <Authorized>
                        <td>
                            <a class="btn btn-success" href="/DerivedStat/Edit/@item.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(item.Id))">Delete</button>
                        </td>
                        </Authorized>
                    </AuthorizeView>
            </tr>
            }
        </tbody>
    </table>
    }
@code {


    private List<DerivedStatModel> DerivedStats { get; set; } = new List<DerivedStatModel>();

    public List<StatModel> AllStats { get; set; } = new List<StatModel>();

    protected override async Task OnInitializedAsync()
    {
        AllStats = await statData.GetAllStats();
        DerivedStats = await statData.GetAllDerivedStats();

    }
    [Authorize(Roles = "Administrator")]
    async Task Delete(int statid)
    {
        var stat = DerivedStats.First(x => x.Id == statid);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {stat.Name}'s ({stat.Id}) Record?"))
        {

            await statData.DeleteDerivedStat(statid);
        }
    }

    private string ReturnStatName(int id)
    {
        var stat = AllStats.FirstOrDefault(x => x.Id == id);
        return stat.StatName;
    }


}
