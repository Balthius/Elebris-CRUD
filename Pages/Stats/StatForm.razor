
<h3>Form</h3>

    <EditForm Model="@SelectedStat" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@SelectedStat" />


        <div class="form-group">
            <label class="control-label">Stat Name</label>
            <InputText @bind-Value="SelectedStat.StatName" class="form-control" />
            <ValidationMessage For="@(() => SelectedStat.StatName)" class="text-danger" />
        </div>
        <div class="form-group">
            <label class="control-label">Beginning Value</label>
            <InputNumber @bind-Value="SelectedStat.BeginningValue" class="form-control" />
            <ValidationMessage For="@(() => SelectedStat.BeginningValue)" class="text-danger" />
        </div>
       @*      @if (SelectedStat.Tags != null)
             {
                @foreach (var tag in SelectedStat.Tags)
                {
                    <div>
                        <span class="my-mr-10">
                            @tag.Name
                        </span>
                        <button type="button" aria-label="close" class="my-icon-close" @onclick="() => RemoveTag(tag.Name)">
                        </button>
                    </div>
                }
             }*@


        <AuthorizeView Roles="Admin, superuser" Context="authContext">
            <Authorized>
                <button type="submit" class="btn btn-success">
                    @ButtonText
                </button>
            </Authorized>
            <NotAuthorized>
             <h3>Disabled</h3>
            </NotAuthorized>
            <Authorizing>
                Checking Role
            </Authorizing>
        </AuthorizeView>

    </EditForm>

    @code {
        [Parameter] public StatModel SelectedStat { get; set; }
        [Parameter] public string ButtonText { get; set; } = "Save";
        [Parameter] public EventCallback OnValidSubmit { get; set; }
        
        [Parameter] public List<StatTagModel> StatTags { get; set; } = new List<StatTagModel>();

        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }

    }


    @*https://codewithmukesh.com/blog/blazor-crud-with-entity-framework-core/*@


    @*https://www.syncfusion.com/blogs/post/how-to-create-a-dynamic-form-builder-in-blazor.aspx*@