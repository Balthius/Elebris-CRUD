@page "/Stat/FetchData"

@inject IStatData statData
@inject IJSRuntime js
<h3>Stats</h3>

<small>Add as many stats as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="stat/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (selectedStats == null)
{
    <text>Loading...</text>
}
else if (selectedStats.Count == 0)
{
    <text>No Records Found.</text>
}
else
{
<div class="form-group">
    <label class="control-label">Stat Group</label>
    <select class="form-control" @onchange="@StatGroupChanged" title="Stat Group">
        <option value="Select">(Choose Group)</option>
        @foreach (var group in statgroups)
        {
            <option value="@group.Id">@group.Id @group.GroupName</option>
        }
    </select>
</div>
   
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Stat Name</th>
                <th>Beginning Value</th>
                <th>Stat Group</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (StatModel item in selectedStats)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.StatName</td>
                    <td>@item.BeginningValue</td>
                    <td>@ReturnStatGroupName(@item.StatGroup)</td>
                    <td>
                        <a class="btn btn-success" href="/Stat/Edit/@item.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(item.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    }
@code {


    private List<StatModel> selectedStats { get; set; } = new List<StatModel>();
    private List<StatModel> allStats { get; set; } = new List<StatModel>();
    private List<StatGroupModel> statgroups { get; set; } = new List<StatGroupModel>();

    protected override async Task OnInitializedAsync()
    {
        List<CoreStatModel> dbModels = await statData.GetAllStats();
        foreach (var item in dbModels)
        {
            StatModel model = ElebrisBlazorUtilities.CovertFromDBModel(item);
            allStats.Add(model);
            selectedStats.Add(model);
        }
        statgroups = await statData.GetAllStatGroups();
    }

    public void StatGroupChanged(ChangeEventArgs e)
    {
        if(string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            selectedStats = new List<StatModel>();
            //Need to catch "select"
            int id = int.Parse(e.Value.ToString());
            foreach (var item in allStats)
            {
                if (item.StatGroup == id)
                {
                    selectedStats.Add(item);
                }
            }
        }
    }
    async Task Delete(int statid)
    {
        var stat = selectedStats.First(x => x.Id == statid);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {stat.StatName}'s ({stat.Id}) Record?"))
        {

            await statData.DeleteStat(statid);
        }
    }

    private string ReturnStatGroupName(int id)
    {
        var stat = statgroups.FirstOrDefault(x => x.Id == id);
        return stat.GroupName;
    }

}
