@page "/Stat/FetchData"

@inject IStatData statData
@inject IJSRuntime js
<h3>Stats</h3>

<small>Add as many stats as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="stat/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>
@if (allStats == null)
{
    <text>Loading...</text>
}
else if (allStats.Count == 0)
{
    <text>No Records Found.</text>
}
else
{

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Stat Name</th>
                <th>Beginning Value</th>
                <th>Stat Group</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (StatModel item in allStats)
            {
            <tr>
                <td>@item.Id</td>
                <td>@item.StatName</td>
                <td>@item.BeginningValue</td>
                

                <td>
                    <a class="btn btn-success" href="/Stat/Edit/@item.Id">Edit</a>
                    <AuthorizeView Roles="Admin, superuser">
                        <Authorized>
                            <button class="btn btn-danger" @onclick="@(() => Delete(item.Id))">Delete</button>
                        </Authorized>
                        <NotAuthorized>
                            <button>Delete Disabled</button>
                        </NotAuthorized>
                        <Authorizing>
                            <h1>Authentication in Progress</h1>
                        </Authorizing>
                    </AuthorizeView>
                </td>

            </tr>
            }
        </tbody>
    </table>
    }
@code {


    private List<StatModel> allStats { get; set; } = new List<StatModel>();

    protected override async Task OnInitializedAsync()
    {
        allStats = await statData.GetAllStats();
       
    }

    
    async Task Delete(int statid)
    {
        var stat = allStats.First(x => x.Id == statid);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {stat.StatName}'s ({stat.Id}) Record?"))
        {

            await statData.DeleteStat(statid);
        }
    }


}
